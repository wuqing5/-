1. 记得输入语句 cin >> a;每次都忘记
2. 走格子 动态规划
  问题描述：你站在左上角 (1,1)，要走到右下角 (n,m)，每一步只能往 下 或 右 走，问你总共有多少种不同的走法？
  算法核心思想：动态规划（DP）
  每个格子 dp[i][j] 表示：从起点 (1,1) 走到当前格子 (i,j) 的路径总数。
  创建n+1,m+1维度的数组，进行赋值，初始dp[1][1]=1;
  第一列只能从上往下走 因此dp[i][1] = dp[i-1][1]=1;其实都等于1 只有一种走法；
  同理第一行只能从左往右走，因此dp[1][j] = dp[1][j-1] =1;也是只有一种走法；
  后续的接着进行赋值即可，dp[i][j]由两个部分组成，一个是从左边来的路线，即dp[i][j-1];另一个为上面来的路线，即dp[i-1][j];
#include <iostream>
using namespace std;
long long dp[1001][1001];
int main() {
    int n,m;
    cin >> n >> m;
    dp[1][1] = 1;
    for(int i=2;i<=n;i++)   dp[i][1]=1;
    for(int j=2;j<=m;j++)   dp[1][j]=1;
    for(int i=2;i<=n;i++)
    {for(int j=2;j<=m;j++){
        dp[i][j] = (dp[i-1][j]+dp[i][j-1]);
    }}
    cout << dp[n][m];
}

